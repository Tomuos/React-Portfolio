==== ./src/App.css ====
/* Remove margin and padding from sections */
#about, #skills, #projects, #contact {
  margin: 0;
  padding: 0;
}


/* App.css */
@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');

/* App.css or any other component-specific CSS file */
body {
  font-family: 'Varela Round', sans-serif;
}


/* App.css (or your main CSS file) */



==== ./src/App.js ====
import React, { useEffect } from 'react';
import { Navbar } from './components/Navbar/Navbar';
import { Galaxy } from './components/Galaxy/Galaxy';
import { AboutMe } from './components/AboutMe/AboutMe';
import { Skills } from './components/Skills/Skills'; 
import { MyProjects } from './components/MyProjects/MyProjects'; 
import { Contact } from './components/Contact/Contact';
import { initIntersectionObserver } from './helpers/intersectionObserver';



function App() {
  useEffect(() => {
    initIntersectionObserver();
  }, []);

  return (
    <div className="App">
      <Navbar />
      <Galaxy />
      <AboutMe className="hidden" />
      <Skills className="hidden" /> 
      <MyProjects className="hidden" /> 
      <Contact className="hidden" />
    </div>
  );
}

export default App;
==== ./src/App.test.js ====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
==== ./src/components/AboutMe/AboutMe.css ====
#about {
    background-color: #1A0064;
    color: #fff;
    padding: 8rem 0; /* Increase padding top and bottom */
    background-image: url('../../assets/images/LongBackgroundspacestars.png');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

#about h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}

#about h3 {
    font-size: 2rem;
    color: aquamarine;
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}    

#about p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}

#about .gallery ul {
    display: flex;
    justify-content: center;
    gap: 1rem; /* space between images */
    list-style: none; /* remove bullet points */
    padding: 0; /* remove default padding */
}

#about .gallery ul li {
    margin: 0 1rem; /* 1rem margin on the left and right */
}

#about .gallery img {
    transition: transform 0.5s ease, box-shadow 0.5s ease; /* smooth transition for scaling and shadow */
}

#about .gallery img:hover {
    transform: translateY(-10px) scale(1.1); /* rise up and scale */
    box-shadow: 0px 0px 20px 5px aquamarine; /* highlighting effect around the edges */
}




.container {
    display: flex;
    width: 100%;
    padding: 4% 2%;
    box-sizing: border-box;
    height: auto;
  }
  
  .box {
    flex: 1;
    overflow: hidden;
    transition: .5s;
    margin: 0 2%;
    box-shadow: 0 20px 30px rgba(0,0,0,.1);
    line-height: 0;
    width: 50px; /* Reduce the width to your desired size */
    height: 450px; /* Adjust the height to maintain aspect ratio */
  }
  
  .box > img {
    width: 100%;
    height: 100%;
    object-fit: cover; 
    transition: .5s;
  }
  
  .box:hover > img {
    width: 100%;
    height: 100%;
  }
  
  .box > span {
    font-size: 3.8vh;
    display: block;
    text-align: center;
    height: 10vh;
    line-height: 2.6;
  }


  
  .box:hover { flex: 1 1 50%; }
  .box:hover > img {
    width: 100%;
    height: 100%;
  }
==== ./src/components/AboutMe/AboutMe.js ====
import React from 'react';
import './AboutMe.css';



export const AboutMe = () => {
  return (
    <section id="about" className="hidden">
      <h1>About Me</h1>
      <h3>Coder & Tech Enthusiast üíª</h3>
      <p>
        Passionate about solving problems through coding. Becoming a regular at Tech meetups such as Brum.js and with a bit of luck Techmids in October
      </p>
      <div className="gallery">
        <ul>
          <li>
            <a href="https://www.meetup.com/brum_js/" className="img-container">
              <img src="../../../public/assets/images/brumjslogo.webp" alt="Brum.js Logo" width="450" height="250" />
            </a>
          </li>
          <li>
            <a href="https://conf.techmids.io/" className="img-container">
              <img src="../../../public/images/Techmidslogo.png" alt="Techmids Logo" width="450" height="250" />
            </a>
          </li>
        </ul>
      </div>
      <div id="familySection">
            <h3>Family Man üë®‚Äçüë¶‚Äçüë¶</h3>
            <p>Dad to two young boys. We love exploring the great outdoors.</p>
            <div className="container">
                <div className="box portrait">
                    <img src="../../../public/images/Ben fishing.jpg" alt="Ben fishing"/>
                    <span>Fishing</span>
                </div>
                <div className="box landscape">
                    <img src="../../../public/images/ducks.jpg" alt="Boys and ducks"/>
                    <span>Feeding time</span>
                </div>
                <div className="box landscape">
                    <img src="../../../public/images/the boys.jpg" alt="The boys in the woods"/>
                    <span>The woods</span>
                </div>
                <div className="box portrait">
                    <img src="../../../public/images/Sunflower boys.jpg" alt="Boys with sunflowers"/>
                    <span>Sunflowers</span>
                </div>
            </div>
        </div>
    </section>
  );
};
==== ./src/components/Contact/Contact.css ====
#contact {
    background-color: #1A0064;
    color: #fff;
    padding: 5rem 0;
}
#contact h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#contact p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}==== ./src/components/Contact/Contact.js ====

import './Contact.css'

export const Contact = ({ className }) => {
  return (
    <section id="contact" className={className}>
      <h1>Contact</h1>
      <p>Here is my contact info and Resume</p>
    </section>
  );
};
==== ./src/components/Galaxy/Galaxy.css ====
#galaxy {
    width: 100vw;
    height: 100vh;
    position: relative;
    overflow: hidden;
    
  }
  
 /* Add these styles to your CSS */
.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
 
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  visibility: hidden;
  animation: fadeIn 2s forwards;
}

.message {
  text-align: center;
  color: white;
  font-size: 3rem;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    visibility: hidden;
  }
  to {
    opacity: 1;
    visibility: visible;
  }
}

  ==== ./src/components/Galaxy/Galaxy.js ====
import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import './Galaxy.css';

export const Galaxy = () => {
  const galaxyRef = useRef(null);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x1A0064); // Setting the background to navy
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    if (galaxyRef.current) {
      galaxyRef.current.appendChild(renderer.domElement);
    }

    // Create a circular texture with a transparent background
    const canvas = document.createElement('canvas');
    canvas.width = 64;
    canvas.height = 64;
    const context = canvas.getContext('2d');
    context.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
    context.beginPath();
    context.arc(32, 32, 30, 0, 2 * Math.PI);
    context.fillStyle = 'white';
    context.fill();

    // Create a texture
    const texture = new THREE.CanvasTexture(canvas);

    // Create material with circular texture
    const material = new THREE.PointsMaterial({
      size: 0.02,
      vertexColors: true,
      map: texture,
      transparent: true,
    });

    const geometry = new THREE.BufferGeometry();
    const positions = new Float32Array(2000 * 3);
    const colors = new Float32Array(2000 * 3);

    for (let i = 0; i < positions.length; i += 3) {
      positions[i] = (Math.random() - 0.5) * 10;
      positions[i + 1] = (Math.random() - 0.5) * 10;
      positions[i + 2] = (Math.random() - 0.5) * 10;

      const color = new THREE.Color(Math.random(), Math.random(), Math.random());
      colors[i] = color.r;
      colors[i + 1] = color.g;
      colors[i + 2] = color.b;
    }

    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const points = new THREE.Points(geometry, material);

    scene.add(points);
    camera.position.z = 5;

    const starTexture = new THREE.TextureLoader().load('../../../public/assets/images/lensflare.png');


    // Create extra stars
const numStars = 100; // You can adjust the number of extra stars as needed

for (let i = 0; i < numStars; i++) {
  const starMaterial = new THREE.SpriteMaterial({ map: starTexture });
  const star = new THREE.Sprite(starMaterial);

  // Randomly position stars within a certain range
  const x = (Math.random() - 0.5) * 20;
  const y = (Math.random() - 0.5) * 20;
  const z = (Math.random() - 0.5) * 20;

  star.position.set(x, y, z);

  // Adjust the scale of stars to make them larger
  star.scale.set(0.1, 0.1, 0.1); // Increase the scale as needed

  scene.add(star);
}

    const animate = () => {
      requestAnimationFrame(animate);
      points.rotation.x += 0.0003;
      points.rotation.y += 0.0003;
      renderer.render(scene, camera);
    };

    animate();
  }, []);

  return (
    <section id="home" className="flex justify-center items-center relative">
      <div style={{ height: '100vh', overflow: 'hidden' }}>
        {/* Your Three.js canvas */}
        <div ref={galaxyRef} className="galaxy-canvas" />

        {/* Overlay */}
        <div className="overlay">
          <div className="message">
            <h1>Hello and welcome</h1>
            <p>You have reached Tomulvlup Dev space</p>
            <p>Explore my universe of code üòÄ</p>
          </div>
        </div>
      </div>
    </section>
  );
};
==== ./src/components/MyProjects/MyProjects.css ====
#projects {
    background-color: #1A0064;
    color: #fff;
    
    background-image: url('../../assets/images/LongBackgroundspacestars.png');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    padding: 5rem 0;
}

#projects h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#projects p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}==== ./src/components/MyProjects/MyProjects.js ====
import './MyProjects.css'

export const MyProjects = ({ className }) => {
  return (
    <section id="projects" className={className}>
      <h1>Projects</h1>
      <p>Information about your project here</p>
    </section>
  );
};
==== ./src/components/Navbar/Navbar.css ====
/* Navbar.css */
nav {
  position: sticky;
  top: 0; /* Sticky at the top of the viewport */
  background-color: rgb(104, 0, 178);
  padding: 10px 50px;
  z-index: 100; /* Ensure it's above other content */
}

ul {
  list-style-type: none;
  display: flex;
  gap: 15px; /* spacing between items */
}

li a {
  color: white;
  text-decoration: none;
  transition: color 0.3s;
  font-family: 'Varela Round', sans-serif;
  font-size: 2rem;
}

li a:hover {
  color: aquamarine;
}

/* Active state - you'll need to implement logic to apply this class */
li a.active {
  color: #ff4500;
}

@media (max-width: 768px) {
  ul {
    flex-direction: column;
    align-items: flex-start;
  }
}
==== ./src/components/Navbar/Navbar.js ====
import React, { useState, useEffect } from 'react';
import './Navbar.css';

export const Navbar = () => {
  const [activeItem, setActiveItem] = useState('home');

  const handleItemClick = (e, item) => {
    e.preventDefault();
    setActiveItem(item);
    const target = document.getElementById(item);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth' });
    }
  };

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth <= 768) {
        setActiveItem('');
      } else {
        setActiveItem('home'); // Reset active item on larger screens
      }
    };

    // Add a resize event listener
    window.addEventListener('resize', handleResize);

    // Clean up the event listener when the component unmounts
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return (
    <nav className="bg-blue-600 p-4 text-white sticky top-0">
      <ul className="flex justify-around">
        <li>
          <a
            href="#home"
            className={`${
              activeItem === 'home' ? 'underline' : ''
            } sm:underline`}
            onClick={(e) => handleItemClick(e, 'home')}
          >
            Home
          </a>
        </li>
        <li>
          <a
            href="#about"
            className={`${
              activeItem === 'about' ? 'underline' : ''
            } sm:underline`}
            onClick={(e) => handleItemClick(e, 'about')}
          >
            About Me
          </a>
        </li>
        <li>
          <a
            href="#skills"
            className={`${
              activeItem === 'skills' ? 'underline' : ''
            } sm:underline`}
            onClick={(e) => handleItemClick(e, 'skills')}
          >
            Skills
          </a>
        </li>
        <li>
          <a
            href="#projects"
            className={`${
              activeItem === 'projects' ? 'underline' : ''
            } sm:underline`}
            onClick={(e) => handleItemClick(e, 'projects')}
          >
            My Projects
          </a>
        </li>
        <li>
          <a
            href="#contact"
            className={`${
              activeItem === 'contact' ? 'underline' : ''
            } sm:underline`}
            onClick={(e) => handleItemClick(e, 'contact')}
          >
            Contact
          </a>
        </li>
      </ul>
    </nav>
  );
};
==== ./src/components/Skills/Skills.css ====
#skills {
    background-color: #1A0064;
    color: #fff;
    
    background-image: url('../../assets/images/earthnobgwp.png');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    padding: 5rem 0;
    
}
#skills h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#skills p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}==== ./src/components/Skills/Skills.js ====
import './Skills.css'

export const Skills = ({ className }) => {
  return (
    <section id="skills" className={className}>
      <h1>Skills</h1>
      <p>Your skills here.</p>
    </section>
  );
};
==== ./src/helpers/intersectionObserver.js ====
export const initIntersectionObserver = () => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      } else {
        entry.target.classList.remove('show');
      }
    });
  }, {
    // You might want to adjust these values to determine how much of the element should be visible before it's "shown"
    rootMargin: '0px',
    threshold: 0.1
  });

  const hiddenElements = document.querySelectorAll('.hidden');
  hiddenElements.forEach((el) => observer.observe(el));
};
==== ./src/helpers/smoothScroll.js ====
// helpers/smoothScroll.js

export const smoothScroll = (e) => {
        e.preventDefault();
        const href = e.target.getAttribute('href');
        const offsetTop = document.querySelector(href)?.offsetTop || 0;
        window.scroll({
            top: offsetTop,
            behavior: 'smooth'
        });
    };
  ==== ./src/index.css ====
*{
  margin: 0;
  padding: 0;
}

/* Import Google Font Varela Round */
@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');


body {

  font-family: 'Varela Round', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Apply Varela Round to specific elements (e.g., headings) */
h1, h2, h3 {
  font-family: 'Varela Round', sans-serif;
}


code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

==== ./src/index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import './tailwind.css';



const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

==== ./src/postcss.config.js ====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
==== ./src/tailwind.config.js ====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}

==== ./src/tailwind.css ====
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
