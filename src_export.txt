==== ./src/components/AboutMe/AboutMe.css ====
#about {
  background-color: #1A0064;
  color: #fff;
  padding: 8rem 0; /* Increase padding top and bottom */
  background-image: url('../../../public/images/wallpaper-sun-stars.png');
  background-repeat: repeat;
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
  
  
}

#about .content {
max-width: 80%;  /* Limits the content width to 80% */
margin: 0 auto;  /* Centers the content horizontally */
background-color: rgba(0, 0, 0, 0.3);
border-radius: 10px;
backdrop-filter: blur(10px);
}

.gradient-heading-container {
background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
border-radius: 10px;
text-align: center;
padding: 1rem 0;
margin: auto; /* Center the container */
width: 100%; /* Fill the entire width of the section */
}

.gradient-heading {
color: white;
font-size: 5rem;
display: inline-block; /* Allows the text to only take up as much space as it needs */
margin: 0; /* Remove any default margin */
}



/* #about h1 {
  font-size: 5rem;
  background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
  border-radius: 10px;
  font-weight: 700;
  text-align: center;
  padding: 2rem 0;
} */

#about h3 {
  font-size: 2.5rem;
  color: aquamarine;
  font-weight: 700;
  text-align: center;
  padding: 2rem 0;
}    

#about p {
  font-size: 2rem;
  font-weight: 400;
  text-align: center;
  padding: 2rem 0;
}

#about h2 {
  font-size: 2rem;
  font-weight: 700;
  text-align: center;
  padding: 2rem 0;
}

#about .gallery ul {
  display: flex;
  justify-content: center;
  gap: 1rem; /* Adjust the gap as necessary */
  list-style: none;
  padding: 0;
  margin: 0 auto;

}

#about .gallery ul li {
  margin: 0 1rem; /* 1rem margin on the left and right */
  
}

#about .gallery img {
  transition: transform 0.5s ease, box-shadow 0.5s ease; /* smooth transition for scaling and shadow */
  border-radius: 30px;
  width: 350px;
  height: 200px;
  display: block;
}

#about .gallery img:hover {
  transform: translateY(-10px) scale(1.1); /* rise up and scale */
  box-shadow: 0px 0px 20px 5px rgb(127, 255, 212); /* highlighting effect around the edges */
}



/*                      Family section                    */
/* .container {
display: flex;
width: 100%;
padding: 4% 2%;
box-sizing: border-box;
height: auto;
} */

/* .box {
flex: 1;
overflow: hidden;
transition: .5s;
margin: 0 2%;
box-shadow: 0 20px 30px rgba(0,0,0,.1);
line-height: 0;
width: 50px;
height: 450px;
}

.box > img {
width: 100%;
height: 100%;
object-fit: cover;
transition: .5s;
}

.box > span {
font-size: 3.8vh;
display: block;
text-align: center;
height: 10vh;
line-height: 2.6;
}

/* Scale for landscape */
/* .box.landscape:hover {
flex: 1 1 80%;
}
.box.landscape:hover > img {
width: 100%;
height: 100%;
object-fit: contain;
} */

/* Scale for portrait */
/* .box.portrait > img {
transform: scale(1.2);  
}
.box.portrait:hover > img {
transform: scale(1);  
}  */

.slider-container {
  position: relative;
  max-width: 1000px; /* Adjust max-width as needed */
  margin: auto; /* This centers the slider on the page */
  overflow: hidden;
  border-radius: 30px;
}

.slider {
  display: flex;
  transition: transform 0.5s ease;
}

.slide {
  display: flex; /* Use flexbox to provide easier alignment */
  justify-content: center; /* Center horizontally in the flex container */
  align-items: center; /* Center vertically in the flex container */
  min-width: 100%; /* Each slide takes full width of the container */
  box-sizing: border-box; /* Include padding and borders in the element's total width and height */
  position: relative;
}

.slide img {
  width: 100%; /* Full width of the slide */
  height: 600px; /* Fixed height for all images */
  object-fit: cover; /* Cover the area, cropping the image if necessary */
}


.slide span {
  position: absolute;
  bottom: 10px;
  left: 10px;
  color: white;
  background-color: rgba(0, 0, 0, 0.7);
  padding: 5px;
}

.slide-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(137, 59, 255, 0.9);
  color: white;
  border: none;
  cursor: pointer;
  padding: 10px;
  z-index: 2;
}

.prev-arrow {
  left: 10px;
}

.next-arrow {
  right: 10px;
}



.about-me-section {
padding: 50px;
/* background-color: rgba(127, 255, 212, 0.786);
color: black; */
border-radius: 30px;


}

.about-me-content {
  display: flex;
  flex-direction: column; /* Keep it in a single column */
  align-items: center; /* Center-align items for a better look */
}

.about-me-text {
width: 60%;
}

.about-me-image {
width: 40%;

}

.about-me-image img {
padding-top: 2em;
width: 100%;
border-radius: 30px;
}


/* #hobbiesSection {
margin: auto;
text-align: center; /* This will center the title and text */
/* padding: 2rem;
}  */


/* Base styles for .hobbies-gallery */
.hobbies-gallery {
  display: flex;
  flex-wrap: wrap; /* Allow items to wrap to the next line */
  justify-content: center; /* Center items horizontally */
  align-items: center; /* Center items vertically */
  gap: 1rem; /* Space between items */
  padding: 1rem; /* Padding around the gallery */
}

/* General styles */
.hobby-item, .hobby-item2 {
  width: 350px; /* Desired width for all items */
  height: 200px; /* Desired height for all items */
  position: relative;
  margin: auto; /* Center the item */
  border-radius: 10px; /* Adjust border-radius as needed */
  overflow: hidden; /* This will hide any overflow */
}

.hobby-item img, .hobby-item2 img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* This will cover the entire area of the container */
  border-radius: 10px; /* Match the container's border-radius */
  transition: transform 0.3s ease-in-out; /* Smooth transition for scaling */
}

.hobby-item span, .hobby-item2 span {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 0.5rem;
  background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background for the span */
  color: white;
  text-align: center; /* Center the text */
  border-radius: 0 0 10px 10px; /* Rounded corners at the bottom to match the image */
  transition: opacity 0.3s ease; /* Smooth transition for visibility */
}

/* Hover effects for hobby-item */
.hobby-item:hover img {
  transform: scale(1.1); /* Slightly enlarge images on hover */
}

.hobby-item:hover span {
  opacity: 1; /* Make the span fully visible on hover */
  visibility: visible;
}

/* Hover effects for hobby-item2 */
.hobby-item2:hover img {
  transform: scale(1.1); /* Slightly shrink images on hover */
}

.hobby-item2:hover span {
  opacity: 1; /* Make the span fully visible on hover */
  visibility: visible;
}

/* Responsive adjustments */
@media screen and (max-width: 768px) {
  .hobby-item, .hobby-item2 {
    width: 100%; /* Full width on smaller screens */
    height: auto; /* Height is auto to maintain aspect ratio */
    min-height: 200px; /* Minimum height to keep some consistency */
  }

  .hobby-item img, .hobby-item2 img {
    height: auto; /* Adjust height automatically */
    min-height: 200px; /* Minimum height to match the hobby-item2 size */
    object-fit: contain; /* Show the full image on smaller screens */
  }

  .hobby-item span, .hobby-item2 span {
    position: absolute;
    bottom: 0;
    left: 50%; /* Start at 50% from the left */
    transform: translateX(-50%); /* Offset by half its width to center */
    width: calc(100% - 1rem); /* Width minus padding */
    padding: 0.5rem;
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
    color: white;
    text-align: center; /* Center the text */
    border-radius: 0 0 10px 10px; /* Rounded corners at the bottom */
    transition: opacity 0.3s ease; /* Smooth transition for hover effects */
    opacity: 0; /* Hide caption initially */
    visibility: hidden; /* Hide caption initially */
  }
  
}


/* Responsive adjustments */
@media screen and (max-width: 768px) {
  .about-me-content {
    display: flex;
    flex-direction: column; /* Stack elements vertically */
    align-items: center; /* Center-align items for a better look */
  }

  

  #about p {
    font-size: 1rem; /* Adjust font size for readability */
    text-align: center; /* Center-align the text */
     
  }

  .about-me-image {
    
    width: 100%; /* Full width to utilize space */
  }

  .about-me-image img {
    max-width: 100%; /* Ensure image is not larger than its container */
    height: auto; /* Maintain aspect ratio */
  }

  #about .content{
    max-width: 100%;
  }

  .gradient-heading{
    font-size: 2rem;
  }

  @media screen and (max-width: 768px) {
    .gallery ul {
      flex-direction: column; /* Stack the list items vertically */
    }
  
    .gallery li {
      margin-bottom: 1rem; /* Add some space between the items */
    }
  
    .img-container img {
      max-width: 80%; /* Take up to 80% of the container width */
      height: auto; /* Maintain aspect ratio */
      margin: 0 auto; /* Center the images */
    }
  }
  
}

@media screen and (max-width: 768px) {
  .box.landscape:hover {
    flex: 1 1 100%;
    width: max-content;
    object-fit: contain;
    transform: scale(0.9)
    }
}

@media screen and (max-width: 768px) {
  .slider-container {
    width: 100%;
  }

  .slide img {
    height: 200px; /* Adjust the height for smaller screens */
    width: 100vw;
    border-radius: 10px;
  }

  .slide span {
    position: absolute;
    bottom: 0; /* Align the bottom of the span with the bottom of the slide */
    left: 50%; /* Center the span from the left */
    transform: translateX(-50%); /* Center the span horizontally */
    width: auto; /* Let the span size according to its content */
    max-width: 90%; /* Give some padding from the edges of the screen */
    margin: 0 auto; /* Center the span */
    padding: 0.5rem; /* Add some padding inside the span */
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
    color: white;
    text-align: center; /* Center the text inside the span */
  }

}


/* For screens smaller than 768px */
@media screen and (max-width: 767px) {
  .hobbies-gallery {
    display: flex;
    flex-direction: column; /* Stack items vertically */
    justify-content: center;
    
    gap: 1rem; /* Space between the items */
    padding: 1rem; /* Padding around the gallery */
    margin: 0 auto; /* Center the gallery horizontally */
    width: 100%; /* Full width of the container */
    max-width: 350px; /* Maximum width of the gallery. Adjust as needed */
  }

  .hobby-item, .hobby-item2 {
    margin: 0 auto; /* Center the items horizontally */
    border-radius: 10px; /* Apply border-radius */
    /* Remove max-height if it distorts the aspect ratio of images */
  }

  .hobby-item img, .hobby-item2 img {
    width: 100%;
    height: auto; /* Maintain aspect ratio */
    object-fit: cover;
    border-radius: 10px; /* Apply border-radius */
    max-width: 350px; /* Maximum width of the gallery. Adjust as needed */
    max-height: 200px; /* Maximum height of the gallery. Adjust as needed */
  }

  .hobby-item span, .hobby-item2 span {
    display: block; /* Make the span a block element */
    width: 100%; /* Full width */
    padding: 0.5rem; /* Padding for the span */
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
    color: white;
    text-align: center; /* Center the text */
    border-radius: 0 0 10px 10px; /* Rounded corners at the bottom */
    margin-top: -5px; /* Negative margin to move up the span slightly */
    box-sizing: border-box; /* Include padding and border in the width */
  }

  .hobby-item:hover img {
    transform: none; /* Slightly enlarge images on hover */
  }

  .hobby-item2:hover img {
    transform: none; /* Slightly enlarge images on hover */
  }

  .hobby-item span {
    opacity: 1; /* Make the span fully visible on hover */
    visibility: visible;
  }
  .hobby-item2 span {
    opacity: 1; /* Make the span fully visible on hover */
    visibility: visible;
  }
  /* Adjustments for hover effects are not needed for mobile */
}




==== ./src/components/AboutMe/AboutMe.js ====
import React, { useState, useEffect } from 'react';
import './AboutMe.css';

export const AboutMe = () => {
  const [slideIndex, setSlideIndex] = useState(1);
 

  function moveSlide(n) {
    setSlideIndex((prevSlideIndex) => {
      let newIndex = prevSlideIndex + n;
      // Wrap slide index when out of bounds
      if (newIndex < 1) {
        newIndex = slides.length; // Go to the last slide
      } else if (newIndex > slides.length) {
        newIndex = 1; // Go back to the first slide
      }
      return newIndex;
    });
  }
  
  

  const slideIndexToShow = slideIndex - 1; // Adjust for array indexing

  const slides = [
    {
      image: "images/benFishing.jpg",
      alt: "Ben fishing",
      caption: "Fishing",
    },
    {
      image: "images/ducks.jpg",
      alt: "Boys and ducks",
      caption: "Feeding time",
    },
    {
      image: "images/theBoys.jpg",
      alt: "The boys in the woods",
      caption: "The woods",
    },
    {
      image: "images/sunflowerBoys.jpg",
      alt: "Boys with sunflowers",
      caption: "Sunflowers",
    },
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setSlideIndex((currentSlideIndex) => {
        return currentSlideIndex === slides.length ? 1 : currentSlideIndex + 1;
      });
    }, 5000); // Change slide every 5000ms (5 seconds)
  
    return () => clearInterval(timer);
  }, [slides.length]); // Add slides.length to the dependency array
  

  return (
    <section id="about" className="hidden">
      <div className="content">
        <div id="about-me" className="about-me-section">
          <div className="gradient-heading-container">
            <h1 className="gradient-heading">About Me</h1>
          </div>

          <div className="about-me-content">
            <div className="about-me-image">
              <img src="/images/Tom.jpg" alt="Tom" className="cover-image" />
            </div>

            <p>
              Hello, I'm Tom! I'm a developer with a focus on front-end technologies like React, HTML, and CSS.
              I have a deep-rooted passion for coding and love taking on new challenges to expand my skill set.
            </p>

            <p>
              I'm currently looking for new job opportunities where I can bring my unique blend of skills and
              passion to a forward-thinking company.
            </p>
          </div>
        </div>

        <h3>Coder & Tech Enthusiast 💻</h3>
        <p>
          I'm a full-stack developer with a passion for creating beautiful, functional and accessible web applications. I have a keen interest in the latest technologies and enjoy learning new skills.
        </p>
        <div className="gallery">
          <ul>
            <li>
              <a href="https://www.meetup.com/brum_js/" className="img-container">
                <img src="images/brumjslogo.webp" alt="Brum.js Logo" width="450" height="250" />
              </a>
            </li>
            <li>
              <a href="https://conf.techmids.io/" className="img-container">
                <img src="images/Techmidslogo.png" alt="Techmids Logo" width="450" height="250" />
              </a>
            </li>
          </ul>
        </div>
        <div id="familySection">
          <h3>Family Man 👨‍👦‍👦</h3>
          <p>Dad to two young boys. We love exploring the great outdoors.</p>
          <div className="slider-container">
          <div className="slider" id="imageSlider" style={{ transform: `translateX(-${slideIndexToShow * 100}%)` }}>
          {slides.map((slide, index) => (
          <div className={`slide ${index === slideIndexToShow ? 'active' : ''}`} key={index}>
            <img src={slide.image} alt={slide.alt} />
            <span>{slide.caption}</span>
          </div>
        ))}

        </div>
            <button className="slide-arrow prev-arrow" onClick={() => moveSlide(-1)}>❮</button>
            <button className="slide-arrow next-arrow" onClick={() => moveSlide(1)}>❯</button>

          </div>
          <p>The boys love the outdoors and occasionally they become right posers.</p>
        </div>

        <div id="hobbiesSection">
          <h3>Hobbies and Funtimes</h3>
          <p>
            I also love hosting pizza parties and gaming — the new Zelda game TOTK is my current favorite!
          </p>

            <h2>My Pizza's</h2>

          <div className="hobbies-gallery">
            <div className="hobby-item">
              <img src="/images/crispy.jpg" alt="Crispy Pizza" className="hobby-image" />
              <span>Crispy Pizza so tasty!</span>
            </div>
            <div className="hobby-item">
              <img src="/images/ooni.jpg" alt="Ooni Pizza Oven" className="hobby-image" />
              <span>Ooni Pizza Oven, best purchase ever</span>
            </div>
            <div className="hobby-item">
              <img src="/images/nduja.jpg" alt="Nduja Pizza" className="hobby-image" />
              <span>Nduja Pizza bit of oomph</span>
            </div>
            <div className="hobby-item">
              <img src="/images/pizzatime.jpg" alt="Cheese n ham" className="hobby-image" />
              <span>Cheese ham and red onions</span>
            </div>
          </div>

            <h2>Some Tears of the kindom screenshots</h2>
          <div className="hobbies-gallery">
            <div className="hobby-item2">
              <img src="/images/Totk1.jpg" alt="Link using the ascend ability" className="hobby-image" />
              <span>Link Ascending</span>
            </div>
            <div className="hobby-item2">
              <img src="/images/Totk5.webp" alt="Link fighting a construct" className="hobby-image" />
              <span>Link fighting a construct</span>
            </div>
            <div className="hobby-item2">
              <img src="/images/lookout-landing.jpg" alt="Link at Lookout Landing" className="hobby-image" />
              <span>Link at Lookout Landing</span>
            </div>
            <div className="hobby-item2">
              <img src="/images/Totk4.webp" alt="Link on his Hover Bike" className="hobby-image" />
              <span>Link on his Hover Bike</span>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};
==== ./src/components/Contact/Contact.css ====
#contact {
    background-color: #1A0064;
    color: #fff;
    padding: 10rem 0;
    background-image: url('../../../public/images/wallpaper-meteor-stars.png');
    background-repeat: repeat;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
}


/* #contact h1 {
    font-size: 5rem;
    background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
    border-radius: 10px;
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
} */
    

#contact p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}

.contact-container {
    max-width: 40%;  /* Limits the content width to 80% */
    margin: 0 auto;  /* Centers the content horizontally */
    padding: 2rem; /* Adds padding around the content */
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent white background */
    border-radius: 10px; /* Rounded corners */
    backdrop-filter: blur(10px); /* Blurred background effect */
    margin-bottom: 2rem;;
}

.gradient-heading-container {
    background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
    border-radius: 10px;
    text-align: center;
    padding: 1rem 0;
    margin: auto; /* Center the container */
    width: 100%; /* Fill the entire width of the section */
  }
  
  #contact .gradient-heading {
    color: white;
    font-size: 5rem;
    display: inline-block; /* Allows the text to only take up as much space as it needs */
    margin: 0; /* Remove any default margin */
  }

  .form-container {
    width: 80%; /* Set the width of the container */
    margin: auto; /* Center the container horizontally */
    padding: 2rem; /* Add some padding around the form */
  }
  
  /* Style the form elements */
  form input, form textarea {
    
      box-sizing: border-box; /* Add this line */
      width: 100%;
      margin-bottom: 1rem;
      padding: 0.5rem;
    
    
  }
  
  form input[type="submit"]:disabled {
    background-color: #ccc; /* Grey out the button */
    cursor: not-allowed;
  }
  
  textarea {
    height: 10rem; /* Set a minimum height */
    resize: none;
  }
  

  /* Optionally, style the submit button */
  form input[type="submit"] {
    background-color: rgb(0, 140, 255); /* Example button color */
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    cursor: pointer;
  }

  .social-links {
    display: flex;
    justify-content: center;
    gap: 20px;
    padding-top: 20px;
  }
  
  .social-links a {
    color: #ffffff; /* or any color you prefer */
    transition: color 0.3s ease;
  }
  
  .social-links a:hover {
    color: rgb(0, 140, 255);
    
  }
  
  

  @media screen and (max-width: 768px) {
    .contact-container {
      max-width: 80%;  /* Limits the content width to 80% */
      margin: 0 auto;  /* Centers the content horizontally */
      padding: 2rem; /* Adds padding around the content */
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent black background */
      border-radius: 10px; /* Rounded corners */
      backdrop-filter: blur(10px); /* Blurred background effect */
  }

  #contact .gradient-heading{
    font-size: 2rem;
  }

  }==== ./src/components/Contact/Contact.js ====
import React, { useRef, useState } from 'react';
import emailjs from '@emailjs/browser';
import './Contact.css';

import { FaGithub, FaLinkedinIn } from 'react-icons/fa'; // For GitHub and LinkedIn icons
import { BsFillFileEarmarkPdfFill } from 'react-icons/bs'; // For PDF icon

export const Contact = () => {
  const form = useRef();
  const [formData, setFormData] = useState({
    user_name: '',
    user_email: '',
    message: '',
  });
  
  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);

  const sendEmail = (e) => {
    e.preventDefault();

    emailjs.sendForm('service_f2l4pyl', 'template_7dnm7pu', form.current, 'mHDzw8z6c4aFmP9je')
      .then((result) => {
          console.log(result.text);
      }, (error) => {
          console.log(error.text);
      });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevFormData => ({
      ...prevFormData,
      [name]: value
    }));
    
    // Check if all fields are filled out to enable the submit button
    setIsSubmitDisabled(
      !formData.user_name || !formData.user_email || !formData.message
    );
  };

  return (
    <section id="contact">
      <div className="contact-container"> 
        <div className="gradient-heading-container">
          <h1 className="gradient-heading">Contact</h1>
        </div>
      
        <form ref={form} onSubmit={sendEmail}>
          <label htmlFor="user_name">Name</label>
          <input type="text" name="user_name" id="user_name" onChange={handleInputChange} />
          <label htmlFor="user_email">Email</label>
          <input type="email" name="user_email" id="user_email" onChange={handleInputChange} />
          <label htmlFor="message">Message</label>
          <textarea name="message" id="message" onChange={handleInputChange} />
          <input type="submit" value="Send" disabled={isSubmitDisabled} />
        </form>
      </div>
      <div className="contact-container">
        <div className="social-links">
          <a href="https://github.com/Tomuos" target="_blank" rel="noopener noreferrer">
            <FaGithub size={60} />
          </a>
          <a href="https://www.linkedin.com/in/tomulvlup/" target="_blank" rel="noopener noreferrer">
            <FaLinkedinIn size={60} />
          </a>
          <a href="/images/Tom BT CV 2023 Nov 16.pdf" download>
            <BsFillFileEarmarkPdfFill size={60} />
          </a>
        </div>
      </div> 
    </section>
  );
};

export default Contact;
==== ./src/components/Galaxy/Galaxy.css ====
#galaxy {
  width: 100vw;
  height: 100vh;
  position: relative;
  overflow: hidden;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  animation: fadeIn 2s forwards;
}

.message {
  color: white;
  font-size: 3rem; /* Large font size for larger screens */
}

.message h1 {
  background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 2em; /* Adjust heading size */
  text-align: center;
}

img {
  max-width: 100%;
  height: auto;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    visibility: hidden;
  }
  to {
    opacity: 1;
    visibility: visible;
  }
}

@media screen and (max-width: 768px) {
  .message {
    font-size: 1.5rem; /* Smaller font size for mobile devices */
  }

  .message h1 {
    font-size: 1.5em; /* Adjust heading size for mobile devices */
  }
}

@media screen and (max-width: 768px) {
  .overlay {
    flex-direction: column;
  }

  .message, .pillars {
    margin: 10px 0; /* Add some margin for spacing */
  }
  img {
    max-width: 80%;
    height: auto;}
}==== ./src/components/Galaxy/Galaxy.js ====
import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import './Galaxy.css';

export const Galaxy = () => {
  const galaxyRef = useRef(null);

  useEffect(() => {
    // Initialize scene, camera, and renderer
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x1A0064);
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    
    // Append renderer to the DOM
    if (galaxyRef.current) {
      galaxyRef.current.appendChild(renderer.domElement);
    }

    // Handle window resize
    const updateCamera = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', updateCamera);

    // Cleanup function
    const cleanup = () => {
      window.removeEventListener('resize', updateCamera);
      galaxyRef.current.removeChild(renderer.domElement);
    };

    // Create particles
    const particles = createParticles();
    scene.add(particles);

  // Create stars
  const stars = createStars();
  stars.forEach(star => scene.add(star));

  // Animation loop
  const animate = () => {
    requestAnimationFrame(animate);

    // Animate stars
    stars.forEach(star => {
      star.position.add(star.velocity);
    });

    // Particles rotation
    particles.rotation.x += 0.0003;
    particles.rotation.y += 0.0003;

    renderer.render(scene, camera);
  };
  animate();

  // Cleanup on component unmount
  return cleanup;
}, []);

  // Function to create particles
  function createParticles() {
    const canvas = document.createElement('canvas');
    canvas.width = 64;
    canvas.height = 64;
    const context = canvas.getContext('2d');
    context.beginPath();
    context.arc(32, 32, 30, 0, 2 * Math.PI);
    context.fillStyle = 'white';
    context.fill();

    const texture = new THREE.CanvasTexture(canvas);
    const material = new THREE.PointsMaterial({
      size: 0.02,
      vertexColors: true,
      map: texture,
      transparent: true,
    });

    const geometry = new THREE.BufferGeometry();
    const positions = new Float32Array(7000 * 3);
    const colors = new Float32Array(7000 * 3);

    for (let i = 0; i < positions.length; i += 3) {
      positions[i] = (Math.random() - 0.5) * 10;
      positions[i + 1] = (Math.random() - 0.5) * 10;
      positions[i + 2] = (Math.random() - 0.5) * 10;

      const color = new THREE.Color(Math.random(), Math.random(), Math.random());
      colors[i] = color.r;
      colors[i + 1] = color.g;
      colors[i + 2] = color.b;
    }

    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    return new THREE.Points(geometry, material);
  }

    // Enhanced createStars function with varied sizes and initial velocities
    function createStars() {
      const starTexture = new THREE.TextureLoader().load('/images/lens-flair.png');
      const stars = [];
      const numStars = 1000;
  
      for (let i = 0; i < numStars; i++) {
        const starMaterial = new THREE.SpriteMaterial({ map: starTexture });
        const star = new THREE.Sprite(starMaterial);
  
        // Randomize position
        star.position.set((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);
  
        // Randomize scale for varied sizes
        const scale = Math.random() * 0.1 + 0.05; // Adjust this range for size variation
        star.scale.set(scale, scale, scale);
  
        // Store velocity for movement
        star.velocity = new THREE.Vector3(
          (Math.random() - 0.5) * 0.002, 
          (Math.random() - 0.5) * 0.002, 
          (Math.random() - 0.5) * 0.002
        );
  
        stars.push(star);
      }
  
      return stars;
    }

  return (
    <section id="home" className="flex justify-center items-center relative">
      <div style={{ height: '100vh', overflow: 'hidden' }}>
        <div ref={galaxyRef} className="galaxy-canvas" />
        <div className="overlay">
          <img src="/images/pillarsofTom.png" alt="Pillars of Tom" className="pillars" />
          <div className="message">
            <h1>Hello and welcome</h1>
            <p>You have reached Tom's Dev space</p>
            <p>My universe of code 😀</p>
          </div>
        </div>
      </div>
    </section>
  );
};
==== ./src/components/MyProjects/MyProjects.css ====
#projects {
    background-color: #1A0064;
    color: #fff;
    background-image: url('../../../public/images/wallpaper-galaxy-stars.png');
    background-repeat: repeat;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    padding: 5rem 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    
}

/* #projects h1 {
    font-size: 5rem;
    background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
    border-radius: 10px;
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
} */

#projects h3 {
    font-size: 2.5rem;
    color: aquamarine;
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}




#projects p 
 {
    color: rgb(255, 255, 255);
    font-size: 2rem;
    text-decoration: none;
    font-style: bold;
    transition: text-decoration 0.3s;
    text-align: left;
    padding: 1rem 0;
}

#projects a {
    color: rgb(133, 241, 255);
    font-size: 2.5rem;
    text-decoration: none;
    transition: text-decoration 0.3s;
}

#projects a:hover {
    text-decoration: underline;
}

#projects div, 
#projects span, 
#projects button {
    font-size: 1.5rem;
}

.motion-div {
    padding: 10px;
    margin: 10px;
    font-size: 1.5em; /* Standardized font size */
    cursor: pointer;
    text-align: center;
    margin-bottom: 20px;
}

.motion-div img {
    width: 650px;
    border-radius: 30px;
    height: auto;
    display: block;
    margin: 20px auto;
    
}

.gradient-heading-container {
    background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
    border-radius: 10px;
    text-align: center;
    padding: 1rem 0;
    margin: auto; /* Center the container */
    width: 100%; /* Fill the entire width of the section */
  }
  
  #projects .gradient-heading {
    color: white;
    font-size: 5rem;
    display: inline-block; /* Allows the text to only take up as much space as it needs */
    margin: 0; /* Remove any default margin */
  }

.link-icon {
    vertical-align: middle;
}

.project-image, .project-video {
    width: 400px;
    height: auto;
}
  
.project-container {
    max-width: 80%;  /* Limits the content width to 80% */
    margin: 0 auto;  /* Centers the content horizontally */
    padding: 2rem ;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    backdrop-filter: blur(10px);
}

.github-link {
    display: flex;
    align-items: center;
    color: white;
    font-size: 1.5rem; /* Standardized font size */
    text-decoration: none;
    margin-top: 20px;
    transition: text-decoration 0.3s;
}

.github-link img {
    margin-right: 10px;
}

.github-link:hover {
    text-decoration: underline;
}
/* MyProjects.css */
.project-video-wrapper {
    position: relative;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    height: 0;
  }
  
  .project-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 30px;
  }
  

/* Keyframes for floating animation */
@keyframes float {
    0%, 100% {
        transform: translateY(0); /* Start and end at the same position */
    }
    50% {
        transform: translateY(-10px); /* Move up by 10px */
    }
}

/* Apply the animation to the GitHub icon */
.github-link img {
    animation: float 2s ease-in-out infinite; /* 2 seconds duration, ease-in-out timing, infinite loop */
    margin-right: 10px;
    /* Rest of your styles... */
}

.github-link img:hover {
    filter: drop-shadow(0 0 20px rgb(127, 255, 212)); /* Add a drop shadow on hover */
    
}

/* Responsive Styles for Mobile Devices */
@media screen and (max-width: 768px) {
    #projects p, #projects a {
        font-size: 1rem; /* Smaller font size for mobile */
    }

    .motion-div img {
        width: 100%; /* Full width images on mobile */
        height: auto;
    }

    .project-image, .project-video {
        width: 100%; /* Full width for project images and videos */
        height: auto;
    }

    .project-container {
        max-width: 100%; /* Use full width of the screen */
    }

    .gradient-heading-container {
        padding: 0.5rem 0; /* Smaller padding */
    }

    #projects .gradient-heading {
        font-size: 3rem; /* Smaller heading font size */
    }

    .github-link {
        font-size: 1rem; /* Smaller font size for GitHub link */
    }
    

    .project-video-wrapper {
        padding-top: 75%; /* Adjust aspect ratio for mobile */
    }

    .github-link img {
        width: 40px; /* Adjust the width as needed for mobile devices */
        height: auto; /* Maintain the aspect ratio of the image */
        animation: float 1.5s ease-in-out infinite; /* Optional: Adjust the animation speed if needed */
    }

}

==== ./src/components/MyProjects/MyProjects.js ====
import React from 'react';

import './MyProjects.css';

export const MyProjects = ({ className }) => {
  const projects = [
    {
      id: "kindr",
      title: "Kindr",
      description: "I worked with a wonderful group of people at the School of Code to create a community-driven app called Kindr.",
      links: [
        { type: "github", url: "https://github.com/jsonandthearguments/kindr" },
        { type: "app", url: "https://kindr.netlify.app/" },
        { type: "presentation", url: "https://www.youtube.com/watch?v=Fc4mhUFAl10&ab_channel=percygr" }
      ],
      image: "images/bg1wb.png"
    }
    
  ];
  
 

  return (
    <section id="projects" className={className}>
      <div>
      <div className='project-container'>
      <div className="gradient-heading-container">
      <h1 className='gradient-heading' >Projects</h1>
      </div>
        <div className="motion-div">
          <p>{projects[0].description}</p>

          <a href={projects[0].links.find(link => link.type === "app").url} target="_blank" rel="noopener noreferrer">
            <img src={projects[0].image} alt="Kindr Logo" className="project-image link-icon" /> 
            Kindr Website
          </a>

        <p>Please take a look at the app the team and I worked on. Things I worked on were the navigation for mobile and pc responsiveness, FAQ page accordian to name a few.</p>
        <p>It was a team effort and I tended to work more on the frontend side of things as I enjoyed creating something that matched our Figma designs</p>
        <p>I learnt a lot from my team, and who knows maybe one day I'll convince them to collab again.</p>


          <div className="project-video-wrapper">
            <iframe 
              title="Kindr App Presentation"
              src="https://www.youtube.com/embed/Fc4mhUFAl10"
              className="project-video"
              allowFullScreen>
            </iframe>
            <p>Kindr App presentation</p>
          </div>
          
        </div>
          

          <a href={projects[0].links.find(link => link.type === "github").url} target="_blank" rel="noopener noreferrer" className="github-link">
          <span class="github-icon-wrapper">
          <img src="images/github.png" alt="GitHub Logo" style={{width: "150px"}}/> 
          </span>
            Link to the GitHub repo code
          </a>
      </div>
    </div>






    

      
    </section>
  );
};
==== ./src/components/Navbar/Navbar.css ====
/* Navbar.css */
nav {
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  background-color: rgb(104, 0, 178);
  padding: 10px 5%;
  z-index: 100;
}

.logo {
  height: 100px; /* Logo size increased to 100px */
  /* Removed margin-right as it may not be necessary */
}

ul {
  list-style-type: none;
  display: flex;
  gap: 15px; /* spacing between items */
  margin: 0; /* Remove default margin */
  padding: 0; /* Remove default padding */
  align-items: center; /* This will vertically center the links */
}

li a {
  color: white;
  text-decoration: none;
  transition: color 0.3s;
  font-family: 'Varela Round', sans-serif;
  font-size: 2rem;
}

li a:hover {
  color: aquamarine;
}

li a.active {
  color: #92ffff;
}

.burger {
  display: none;
  cursor: pointer;
}

.burger div {
  width: 25px;
  height: 3px;
  background-color: white;
  margin: 5px;
  transition: all 0.3s ease;
}

/* Toggle lines for burger animation */
.burger.open div:nth-child(1) {
  transform: rotate(-45deg) translate(-5px, 6px);
}

.burger.open div:nth-child(2) {
  opacity: 0;
}

.burger.open div:nth-child(3) {
  transform: rotate(45deg) translate(-5px, -6px);
}


@keyframes rumble {
  0% { transform: translate(0, 0); }
  25% { transform: translate(-2px, -2px); }
  50% { transform: translate(2px, 2px); }
  75% { transform: translate(-2px, 2px); }
  100% { transform: translate(2px, -2px); }
}

.logo-link .logo {
  transition: transform 0.9s ease; /* Shorter duration for transitions outside of hover */
  display: inline-block; /* Needed to apply transform */
}

.logo-link:hover .logo {
  animation: rumble 0.6s linear infinite; /* 'linear' for a consistent rumble effect */
}

/* Responsive */
@media (max-width: 768px) {
  .burger {
    display: block;
  }

  .nav-links {
    display: none;
    flex-direction: column;
    width: auto;
  }

  .nav-links.open {
    display: flex;
  }

  nav {
    justify-content: space-between; /* This will keep the logo on the left and the burger menu on the right */
  }

  .logo {
    height: 50px; /* Adjust the size as needed for your design */
    width: auto; /* Maintain the aspect ratio of the logo */

}

.logo-link .logo {
  transition: none; 
  
}

.logo-link:hover .logo {
  animation: none; 
}

}

==== ./src/components/Navbar/Navbar.js ====
import React, { useState, useEffect } from 'react';
import './Navbar.css';

export const Navbar = () => {
  const [activeItem, setActiveItem] = useState('home');
  const [burgerOpen, setBurgerOpen] = useState(false);

  const handleItemClick = (e, item) => {
    e.preventDefault();
    setActiveItem(item);
    setBurgerOpen(false);
    const target = document.getElementById(item);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const toggleBurger = () => {
    setBurgerOpen(!burgerOpen);
  };
  
  useEffect(() => {
    const sections = ['home', 'about', 'skills', 'projects', 'contact'];

    const onScroll = () => {
      let currentSection = 'home';
      for (const section of sections) {
        const element = document.getElementById(section);
        if (element) {
          const topBound = element.offsetTop;
          const bottomBound = topBound + element.offsetHeight;
          const scrollTop = window.scrollY;
          if (scrollTop >= topBound && scrollTop < bottomBound) {
            currentSection = section;
            break;
          }
        }
      }
      setActiveItem(currentSection);
    };

    window.addEventListener('scroll', onScroll);
    return () => window.removeEventListener('scroll', onScroll);
  }, []);

  return (
    <nav className="navbar">
      {/* Wrap the logo in an anchor tag */}
      <a href="#home" onClick={(e) => handleItemClick(e, 'home')} className="logo-link">
        <img src="/images/logo3.png" alt="Comet Logo" className="logo" />
      </a>
      <div className="burger" onClick={toggleBurger}>
        <div className="line"></div>
        <div className="line"></div>
        <div className="line"></div>
      </div>
      <ul className={`nav-links ${burgerOpen ? 'open' : ''}`}>
        {['home', 'about', 'skills', 'projects', 'contact'].map((item) => (
          <li key={item}>
            <a
              href={`#${item}`}
              className={activeItem === item ? 'active' : ''}
              onClick={(e) => handleItemClick(e, item)}
            >
              {item.charAt(0).toUpperCase() + item.slice(1)}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Navbar;
==== ./src/components/Skills/Skills.css ====
/* Skills.css */
#skills {
  position: relative;
  background-color: #1A0064;
  color: #fff;
  padding: 5rem 0;
  background-image: url('/public/images/wallpaper-earth-moon-stars.png'); 
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
  background-repeat: no-repeat;
}

.content-overlay {
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  font-size: 1.5rem;
  font-weight: 400;
  padding: 2rem ;
 
}

.white-block{
  background-color: rgba(0, 0, 0, 0.3);
  max-width: 60%;
  margin: 0 auto;
  backdrop-filter: blur(10px);
  border-radius: 10px;
}

#skills h1, #skills h2 {
  color: #fff;
  font-weight: 700;
  text-align: center;
  margin: 1rem 0;
}

/* #skills h1 {
  font-size: 5rem;
    background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
    border-radius: 10px;
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
} */

#skills h2 {
  font-size: 4rem;
}

#skills h3 {
  font-size: 2.5rem;
  color: aquamarine;
  margin: 1rem 0;
}

.gradient-heading-container {
  background: linear-gradient(to right, rgb(179, 0, 255), rgb(0, 140, 255));
  border-radius: 10px;
  text-align: center;
  padding: 1rem 0;
  margin: auto; /* Center the container */
  width: 100%; /* Fill the entire width of the section */
}

#skills .gradient-heading {
  color: white;
  font-size: 5rem;
  display: inline-block; /* Allows the text to only take up as much space as it needs */
  margin: 0; /* Remove any default margin */
}


.skills-icons {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 2rem;
}

.skill {
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: transform 0.3s, filter 0.3s;
  /* cursor: pointer; */
}

.skill img {
  width: 80px;
  height: auto;
  margin-bottom: 1rem;
}

.skill:hover {
  transform: translateY(-10px) scale(1.1);
  filter: drop-shadow(0 0 20px rgb(127, 255, 212));
}

/* Floating animation for different skill groups */
.front-end-skills .skill {
  animation: float 3s ease-in-out infinite;
}

.design-skills .skill {
  animation: float 3.2s ease-in-out infinite;
}

.other-tools-skills .skill {
  animation: float 3.5s ease-in-out infinite;
}

.photography-skills .skill {
  animation: float 3.7s ease-in-out infinite;
}

/* Keyframes for floating animations */
@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@media screen and (max-width: 768px) {

  #skills .gradient-heading{
    font-size: 2rem;
  }

  

  .white-block {
    max-width: 95%;
  }

  #skills h1 {
    font-size: 3rem;
  }

  #skills h2 {
    font-size: 2rem;
  }

  #skills h3 {
    font-size: 1.5rem;
  }

  .skills-icons {
    gap: 1rem;
  }

  .skill img {
    width: 50px;
  }
}==== ./src/components/Skills/Skills.js ====
import React from 'react';
import './Skills.css';

export const Skills = () => {
  return (
    <section id="skills">
    <div className='white-block'>
      <div className="content-overlay">
      <div className="gradient-heading-container">
        <h1 className="gradient-heading">Skills</h1>
        </div>
        <h2>Front End</h2>
        <div className="skills-icons front-end-skills"> {/* Container for front-end skills icons */}
          <div className="skill">
            <img src="images/react.png" alt="React Logo"/>
            <h4>6 months of React</h4>
          </div>
          <div className="skill">
            <img src="images/java-script.png" alt="JavaScript Logo"/>
            <h4>A year of Javascript</h4>
          </div>
          <div className="skill">
            <img src="images/html-5.png" alt="HTML5 Logo"/>
            <h4>Few years of HTML</h4>
          </div>
          <div className="skill">
            <img src="images/css-3.png" alt="CSS3 Logo"/>
            <h4>Few years of CSS</h4>
          </div>
        </div>
      </div>

      <div className="content-overlay">
        <h2>Other Skills</h2>
        <div className="skills-icons design-skills"> {/* Container for design skills icons */}
          <div className="skill">
            <img src="images/adobe.png" alt="Adobe Suite Logo"/>
            <h4>Adobe Suite</h4>
          </div>
          <div className="skill">
            <img src="images/icons8-affinity-designer-240.png" alt="Affinity Designer Logo"/>
            <h4>Affinity Designer</h4>
          </div>
          <div className="skill">
            <img src="images/icons8-affinity-photo-240.png" alt="Affinity PhotoLogo"/>
            <h4>Affinity Photo</h4>
          </div>
          <div className="skill">
            <img src="images/icons8-affinity-publisher-240.png" alt="Affinity Publisher Logo"/>
            <h4>Affinity Publisher</h4>
          </div>
        </div>
      </div>

      
      <div className="content-overlay">
        <div className="skills-icons other-tools-skills"> {/* Container for other tools skills icons */}
          <div className="skill">
            <img src="images/icons8-docker-240.png" alt="Docker Logo"/>
            <h4>Docker</h4>
          </div>
          <div className="skill">
            <img src="images/icons8-git-240.png" alt="Git Logo"/>
            <h4>Git</h4>
          </div>
          <div className="skill">
            <img src="images/trello.png" alt="Trello Logo"/>
            <h4>Trello</h4>
          </div>
        </div>
      </div>

      <div className="content-overlay">
        <div className="skills-icons photography-skills"> {/* Container for photography skills icons */}
          <div className="skill">
            <img src="images/camera.png" alt="Photography Logo"/>
            <h4>Photography</h4>
          </div>
          <div className="skill">
            <img src="images/icons8-figma-240.png" alt="Figma Logo"/>
            <h4>Figma</h4>
          </div>
        </div>
      </div>
</div>
    </section>
  );
};

export default Skills;
