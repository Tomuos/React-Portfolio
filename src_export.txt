/* Remove margin and padding from sections */
#about, #skills, #projects, #contact {
  margin: 0;
  padding: 0;
}


/* App.css */
@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');

/* App.css or any other component-specific CSS file */
body {
  font-family: 'Varela Round', sans-serif;
}


/* App.css (or your main CSS file) */



import React, { useEffect } from 'react';
import { Navbar } from './components/Navbar/Navbar';
import { Galaxy } from './components/Galaxy/Galaxy';
import { AboutMe } from './components/AboutMe/AboutMe';
import { Skills } from './components/Skills/Skills'; 
import { MyProjects } from './components/MyProjects/MyProjects'; 
import { Contact } from './components/Contact/Contact';
import { initIntersectionObserver } from './helpers/intersectionObserver';
// import './tailwind.css'

function App() {
  useEffect(() => {
    initIntersectionObserver();
  }, []);

  return (
    <div className="App">
      <Navbar />
      <Galaxy />
      <AboutMe className="hidden" />
      <Skills className="hidden" /> 
      <MyProjects className="hidden" /> 
      <Contact className="hidden" />
    </div>
  );
}

export default App;
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
#about {
    background-color: #1A0064;
    color: #fff;
    height: 100vh;
    padding: 5rem 0;
    
}
#about h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}

#about h2 {
    font-size: 3rem;
    color: rgb(81, 200, 255);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}    

#about p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}

import React from 'react';
import './AboutMe.css';

// Import images
import brumJsLogo from '../../assets/images/brumjslogo.webp';
import techmidsLogo from '../../assets/images/Techmidslogo.png';
import benFishing from '../../assets/images/Ben fishing.jpg';
import boysAndDucks from '../../assets/images/ducks.jpg';
import theBoys from '../../assets/images/the boys.jpg';
import sunflowerBoys from '../../assets/images/Sunflower boys.jpg';

export const AboutMe = ({ className }) => {
  return (
    <section id="about" className={className}>
      <h1>About Me</h1>
      <h3>Coder & Tech Enthusiast üíª</h3>
      <p>
        Passionate about solving problems through coding. Becoming a regular at Tech meetups such as Brum.js and with a bit of luck Techmids in October.
      </p>
      <div>
        <ul>
          <li>
            <a href="https://www.meetup.com/brum_js/">
              <img src={brumJsLogo} alt="Brum.js Logo" />
            </a>
          </li>
          <li>
            <a href="https://conf.techmids.io/">
              <img src={techmidsLogo} alt="Techmids Logo" />
            </a>
          </li>
        </ul>
      </div>

      <h3>Family Man üë®‚Äçüë¶‚Äçüë¶</h3>
      <p>Dad to two young boys. We love exploring the great outdoors.</p>
      <div className="image-grid">
        <div>
          <img src={benFishing} alt="Ben Fishing" />
          <span>Fishing</span>
        </div>
        <div>
          <img src={boysAndDucks} alt="Boys and Ducks" />
          <span>Feeding time</span>
        </div>
        <div>
          <img src={theBoys} alt="The Boys" />
          <span>The woods</span>
        </div>
        <div>
          <img src={sunflowerBoys} alt="Sunflower Boys" />
          <span>Sunflowers</span>
        </div>
      </div>

      <h3>Hobbies üé®üçï</h3>
      <p>Known for my pizza parties and dabbling in digital art. Currently gaming through Zelda's TOTK.</p>
      <div>
        {/* Add more content here */}
      </div>

      <h3>Why I Code üí°</h3>
      <p>It's not just about lines of code; it's about making things come alive and hopefully doing something useful with it.</p>

      <h3>Let's Connect ü§ù</h3>
      <p>Interested in collaborating or networking? I'd love to hear from you!</p>
    </section>
  );
};
#contact {
    background-color: #1A0064;
    color: #fff;
    height: 100vh;
    
}
#contact h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#contact p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}
import './Contact.css'

export const Contact = ({ className }) => {
  return (
    <section id="contact" className={className}>
      <h1>Contact</h1>
      <p>Here is my contact info and Resume</p>
    </section>
  );
};
#galaxy {
    width: 100vw;
    height: 100vh;
    position: relative;
    overflow: hidden;
    
  }
  import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';

export const Galaxy = () => {
  const galaxyRef = useRef(null);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x1A0064); // Setting the background to navy
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    if (galaxyRef.current) {
      galaxyRef.current.appendChild(renderer.domElement);
    }

    // Create a circular texture with a transparent background
    const canvas = document.createElement('canvas');
    canvas.width = 64;
    canvas.height = 64;
    const context = canvas.getContext('2d');
    context.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
    context.beginPath();
    context.arc(32, 32, 30, 0, 2 * Math.PI);
    context.fillStyle = 'white';
    context.fill();

    // Create a texture
    const texture = new THREE.CanvasTexture(canvas);

    // Create material with circular texture
    const material = new THREE.PointsMaterial({
      size: 0.02,
      vertexColors: true,
      map: texture,
      transparent: true,
    });

    const geometry = new THREE.BufferGeometry();
    const positions = new Float32Array(2000 * 3);
    const colors = new Float32Array(2000 * 3);

    for (let i = 0; i < positions.length; i += 3) {
      positions[i] = (Math.random() - 0.5) * 10;
      positions[i + 1] = (Math.random() - 0.5) * 10;
      positions[i + 2] = (Math.random() - 0.5) * 10;

      const color = new THREE.Color(Math.random(), Math.random(), Math.random());
      colors[i] = color.r;
      colors[i + 1] = color.g;
      colors[i + 2] = color.b;
    }

    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const points = new THREE.Points(geometry, material);

    scene.add(points);
    camera.position.z = 5;

    const starTexture = new THREE.TextureLoader().load('/assets/images/lensflare.png');


    // Create extra stars
const numStars = 100; // You can adjust the number of extra stars as needed

for (let i = 0; i < numStars; i++) {
  const starMaterial = new THREE.SpriteMaterial({ map: starTexture });
  const star = new THREE.Sprite(starMaterial);

  // Randomly position stars within a certain range
  const x = (Math.random() - 0.5) * 20;
  const y = (Math.random() - 0.5) * 20;
  const z = (Math.random() - 0.5) * 20;

  star.position.set(x, y, z);

  // Adjust the scale of stars to make them larger
  star.scale.set(0.1, 0.1, 0.1); // Increase the scale as needed

  scene.add(star);
}

    const animate = () => {
      requestAnimationFrame(animate);
      points.rotation.x += 0.0003;
      points.rotation.y += 0.0003;
      renderer.render(scene, camera);
    };

    animate();
  }, []);

  return (
    <div style={{ height: '100vh', overflow: 'hidden' }}>
      <div ref={galaxyRef} />
    </div>
  );
};
#projects {
    background-color: #1A0064;
    color: #fff;
    height: 100vh;
    
}
#projects h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#projects p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}import './MyProjects.css'

export const MyProjects = ({ className }) => {
  return (
    <section id="projects" className={className}>
      <h1>Projects</h1>
      <p>Information about your project here</p>
    </section>
  );
};
/* Navbar.css */
nav {
  position: sticky;
  top: 0; /* Sticky at the top of the viewport */
  background-color: rgb(104, 0, 178);
  padding: 10px 50px;
  z-index: 100; /* Ensure it's above other content */
}

ul {
  list-style-type: none;
  display: flex;
  gap: 15px; /* spacing between items */
}

li a {
  color: white;
  text-decoration: none;
  transition: color 0.3s;
  font-family: 'Varela Round', sans-serif;
  font-size: 2rem;
}

li a:hover {
  color: #ffd700;
}

/* Active state - you'll need to implement logic to apply this class */
li a.active {
  color: #ff4500;
}

@media (max-width: 768px) {
  ul {
    flex-direction: column;
    align-items: flex-start;
  }
}
// Navbar.js
import React, { useState } from 'react';
import './Navbar.css';

export const Navbar = () => {
    const [activeItem, setActiveItem] = useState('home');

    const handleItemClick = (e, item) => {
        e.preventDefault();
        setActiveItem(item);
        const target = document.getElementById(item);
        if (target) {
            target.scrollIntoView({ behavior: 'smooth' });
        }
    };

    return (
        <nav className="bg-blue-600 p-4 text-white">
            <ul className="flex justify-around">
                <li><a href="#home" className={activeItem === 'home' ? 'underline' : ''} onClick={(e) => handleItemClick(e, 'home')}>Home</a></li>
                <li><a href="#about" className={activeItem === 'about' ? 'underline' : ''} onClick={(e) => handleItemClick(e, 'about')}>About Me</a></li>
                <li><a href="#skills" className={activeItem === 'skills' ? 'underline' : ''} onClick={(e) => handleItemClick(e, 'skills')}>Skills</a></li>
                <li><a href="#projects" className={activeItem === 'projects' ? 'underline' : ''} onClick={(e) => handleItemClick(e, 'projects')}>My Projects</a></li>
                <li><a href="#contact" className={activeItem === 'contact' ? 'underline' : ''} onClick={(e) => handleItemClick(e, 'contact')}>Contact</a></li>
            </ul>
        </nav>
    );
};
#skills {
    background-color: #1A0064;
    color: #fff;
    height: 100vh;
    
}
#skills h1 {
    font-size: 3rem;
    color: rgb(221, 0, 0);
    font-weight: 700;
    text-align: center;
    padding: 2rem 0;
}
    

#skills p {
    font-size: 1.5rem;
    font-weight: 400;
    text-align: center;
    padding: 2rem 0;
}import './Skills.css'

export const Skills = ({ className }) => {
  return (
    <section id="skills" className={className}>
      <h1>Skills</h1>
      <p>Your skills here.</p>
    </section>
  );
};
export const initIntersectionObserver = () => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      } else {
        entry.target.classList.remove('show');
      }
    });
  }, {
    // You might want to adjust these values to determine how much of the element should be visible before it's "shown"
    rootMargin: '0px',
    threshold: 0.1
  });

  const hiddenElements = document.querySelectorAll('.hidden');
  hiddenElements.forEach((el) => observer.observe(el));
};
// helpers/smoothScroll.js

export const smoothScroll = (e) => {
        e.preventDefault();
        const href = e.target.getAttribute('href');
        const offsetTop = document.querySelector(href)?.offsetTop || 0;
        window.scroll({
            top: offsetTop,
            behavior: 'smooth'
        });
    };
  *{
  margin: 0;
  padding: 0;
}

/* Import Google Font Varela Round */
@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');


body {

  font-family: 'Varela Round', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Apply Varela Round to specific elements (e.g., headings) */
h1, h2, h3 {
  font-family: 'Varela Round', sans-serif;
}


code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import './tailwind.css';



const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
